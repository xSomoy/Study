WEBVTT

1
00:00:00.025 --> 00:00:06.031
[MUSIC]

2
00:00:06.031 --> 00:00:09.100
At the core of HTML is the HTML tag.

3
00:00:09.100 --> 00:00:13.260
So it's pretty important to understand
what HTML tag consists of, and

4
00:00:13.260 --> 00:00:18.430
how to properly, syntactically properly,
code up an HTML tag.

5
00:00:20.080 --> 00:00:24.160
Usually HTML tags have an opening and
a closing tag.

6
00:00:24.160 --> 00:00:26.970
And they surround some content.

7
00:00:26.970 --> 00:00:32.020
In this case, the tag p, which stands for
paragraph, is communicating

8
00:00:32.020 --> 00:00:38.240
to us that the content in the gray
area should be treated as a paragraph.

9
00:00:38.240 --> 00:00:42.280
Now technically speaking,
p by itself is called an element.

10
00:00:42.280 --> 00:00:44.800
And together with the angle
brackets it's called a tag.

11
00:00:44.800 --> 00:00:48.710
But the truth is the term is used so
interchangeably, that whenever somebody

12
00:00:48.710 --> 00:00:53.280
refers to an element p, or a tag p, they
really could mean one and the same thing.

13
00:00:54.560 --> 00:01:00.730
Now most HTML tags have a closing tag
that matches its opening tag but not all.

14
00:01:00.730 --> 00:01:05.800
For example, the br and hr tag,
br stands for line break,

15
00:01:05.800 --> 00:01:10.430
and hr stands for horizontal rule,
only have an opening tag.

16
00:01:10.430 --> 00:01:12.510
They don't have a closing tag at all.

17
00:01:14.310 --> 00:01:18.290
Now every HTML element can
have predefined attributes.

18
00:01:18.290 --> 00:01:21.950
So we will learn some of the most common
ones as we progress in the course, but

19
00:01:21.950 --> 00:01:25.590
here's what you need to know
about tag attributes in general.

20
00:01:25.590 --> 00:01:29.450
Attribute is a name value pair
that is kind of a meta data about

21
00:01:29.450 --> 00:01:32.490
the element itself that
it's being applied to.

22
00:01:32.490 --> 00:01:38.670
So in this example, we are assigning
myId as the value of the id attribute.

23
00:01:38.670 --> 00:01:41.470
Each attribute has its own rules for
the meaning of its value.

24
00:01:41.470 --> 00:01:44.760
So for example, id attribute,
being assigned as an example,

25
00:01:44.760 --> 00:01:48.140
has to be unique within the scope
of the entire HTML document.

26
00:01:48.140 --> 00:01:52.820
In other words, no other element of any
kind in the webpage is allowed to have its

27
00:01:52.820 --> 00:01:57.090
id attribute equal to the string myID.

28
00:01:57.090 --> 00:01:59.450
If there's another element
with the same value for

29
00:01:59.450 --> 00:02:03.180
id that would mean that
the webpage contains invalid HTML

30
00:02:03.180 --> 00:02:07.700
which can potentially break some style
lingo, even functionality of the page.

31
00:02:07.700 --> 00:02:10.640
Now let me go over some of
the basic spacing rules.

32
00:02:10.640 --> 00:02:16.130
No space is allowed to exist between
the opening bracket and the tag name.

33
00:02:16.130 --> 00:02:20.330
And likewise, space is not allowed
between the opening bracket and

34
00:02:20.330 --> 00:02:22.390
the foreword slash of the closing tag.

35
00:02:22.390 --> 00:02:27.510
However, you must have at least one
space between the tag itself and any

36
00:02:27.510 --> 00:02:33.010
of its attributes, and space is allowed
everywhere else and is simply ignored.

37
00:02:33.010 --> 00:02:36.940
So if you have extra space after
the p element in the opening tag, or

38
00:02:36.940 --> 00:02:40.310
if you have extra space between
the equal sign of the attribute name,

39
00:02:40.310 --> 00:02:42.780
attribute value, or you have other spaces,

40
00:02:42.780 --> 00:02:47.730
even return characters, all of that
is completely ignored by the browser.

41
00:02:47.730 --> 00:02:51.710
One more rule, attributes can only
be specified on the opening tag, so

42
00:02:51.710 --> 00:02:54.550
you can't specify an attribute
on the closing tag.

43
00:02:55.740 --> 00:02:58.986
Now let's talk about the value
of attributes for a minute.

44
00:02:58.986 --> 00:03:03.244
In HTML5, enclosing the value of
the attribute in quotes is technically,

45
00:03:03.244 --> 00:03:06.110
actually not required
in all circumstances.

46
00:03:06.110 --> 00:03:10.630
But never the less, it's best
practice to always surround the value

47
00:03:10.630 --> 00:03:15.550
of the attribute in either single or
double quotes.

48
00:03:15.550 --> 00:03:18.220
It doesn't matter whether you
use single or double quotes.

49
00:03:18.220 --> 00:03:19.980
They really are equivalent in HTML.

50
00:03:19.980 --> 00:03:22.900
A more interesting case arises when

51
00:03:22.900 --> 00:03:25.160
the value of the attribute
itself contains quotes.

52
00:03:25.160 --> 00:03:28.720
So the actual value has
quotes as part of its value.

53
00:03:28.720 --> 00:03:31.800
In this type of situation,
the only thing you have to watch out for

54
00:03:31.800 --> 00:03:36.290
is making sure you close the quote
in opposite order of opening them.

55
00:03:36.290 --> 00:03:40.370
So if the last quote was a single quote,
it must be closed first.

56
00:03:40.370 --> 00:03:43.290
Which quotes you start with
doesn't make any difference.

57
00:03:43.290 --> 00:03:46.340
You could start with double quotes,
as we have in the example here, or

58
00:03:46.340 --> 00:03:47.700
you could start with single quotes.

59
00:03:47.700 --> 00:03:51.440
You could also nest these as many times
as you want as long as you close them,

60
00:03:51.440 --> 00:03:55.290
obviously in the proper order, but
in practice it's kind of very rare

61
00:03:55.290 --> 00:03:58.120
that you have to have more
than two levels of quotes.

62
00:03:58.120 --> 00:04:01.380
Any more than that, and your code
just becomes messy and hard to read.

63
00:04:02.410 --> 00:04:06.310
Now if you've dealt with previous
versions of HTML, especially XHTML,

64
00:04:06.310 --> 00:04:09.781
you might be familiar with
the idea of a self-closing tag.

65
00:04:09.781 --> 00:04:14.660
A self-closing tag is basically
an XML type of shorthand notation for

66
00:04:14.660 --> 00:04:18.270
a tag that happens to not
to contain any content.

67
00:04:18.270 --> 00:04:22.780
For example, if we wanted to have
a placeholder in our HTML document for

68
00:04:22.780 --> 00:04:27.270
some other content that we'll dynamically
perhaps insert at some later point.

69
00:04:27.270 --> 00:04:31.130
That would be one example
of when we need to have

70
00:04:31.130 --> 00:04:34.140
an HTML tag that has no
content to begin with.

71
00:04:34.140 --> 00:04:38.370
However in HTML5,
the tag is a little bit more semantic.

72
00:04:38.370 --> 00:04:41.300
So if the HTML5 tag is capable,

73
00:04:41.300 --> 00:04:46.070
meaning it can possibly ever have
some content, it is illegal for

74
00:04:46.070 --> 00:04:50.010
that tag to be self closing,
even if there is no content at the moment.

75
00:04:50.010 --> 00:04:52.080
So instead, you have to provide and
opening and

76
00:04:52.080 --> 00:04:55.730
the closing tags without any space
in-between them to signify and

77
00:04:55.730 --> 00:05:00.270
to communicate the lack of content
as surrounded by this tag.

78
00:05:00.270 --> 00:05:03.490
So in summary,
we went over the anatomy of HTML tag.

79
00:05:03.490 --> 00:05:05.210
The opening, the closing tags,

80
00:05:05.210 --> 00:05:09.220
the fact that it can attributes
describing what the tag itself is.

81
00:05:09.220 --> 00:05:12.970
Remember that you can use double and
single quotes interchangeably.

82
00:05:12.970 --> 00:05:17.540
Just make sure if there's actual
quotes in the value of an attribute,

83
00:05:17.540 --> 00:05:20.430
you have to interchange them in
the same order that you opened them.

84
00:05:20.430 --> 00:05:23.100
You have to all close them
in the opposite order.

85
00:05:23.100 --> 00:05:27.360
And we also went over how to specify a tag
without any content inside HTML5, for

86
00:05:27.360 --> 00:05:32.320
which the rules are a little bit different
than for the previous versions of HTML.

87
00:05:32.320 --> 00:05:36.778
Next, we're going to talk about how to
create the basic HTML document structure.