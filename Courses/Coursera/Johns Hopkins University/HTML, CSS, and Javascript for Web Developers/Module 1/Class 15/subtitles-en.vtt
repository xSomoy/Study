WEBVTT

1
00:00:00.000 --> 00:00:05.461
[MUSIC]

2
00:00:05.461 --> 00:00:08.570
Links pretty much what
makes the web what it is.

3
00:00:08.570 --> 00:00:12.130
In this lecture, we're going to take
a look at different types of links and

4
00:00:12.130 --> 00:00:15.280
how you could create
them in your HTML page.

5
00:00:15.280 --> 00:00:17.610
So the first type of links that
we're going to take a look at

6
00:00:17.610 --> 00:00:19.210
are internal links.

7
00:00:19.210 --> 00:00:23.240
Here I am looking at the file
called links-internal.html,

8
00:00:23.240 --> 00:00:27.580
and it's located in
the examples/Lecture09 folder.

9
00:00:27.580 --> 00:00:30.290
And here we have a couple of links
we're going to take a look at.

10
00:00:30.290 --> 00:00:34.690
Now the way you create links
is by specifying an a element

11
00:00:34.690 --> 00:00:36.240
with an attribute href.

12
00:00:36.240 --> 00:00:39.370
And href stands for hypertext reference.

13
00:00:39.370 --> 00:00:44.670
The value of href can either be
a relative or an absolute URL.

14
00:00:44.670 --> 00:00:47.950
In our case here,
since we're discussing internal links

15
00:00:47.950 --> 00:00:52.720
which are links that point to internal
web pages of the where application,

16
00:00:52.720 --> 00:00:56.230
the links we're showing
are all relative URL links.

17
00:00:56.230 --> 00:00:59.670
However we could still have an even
absolute URL links as long as they point,

18
00:00:59.670 --> 00:01:03.230
again, to the same web
application that we're in.

19
00:01:03.230 --> 00:01:06.020
Since we're providing no
directory information,

20
00:01:06.020 --> 00:01:10.880
the browser will assume that
same-directory.html is a file that lives

21
00:01:10.880 --> 00:01:15.860
in the same directory
as links-internal.html.

22
00:01:15.860 --> 00:01:21.840
It's also a very good idea to always
specify a title attribute for the a tag.

23
00:01:21.840 --> 00:01:24.820
The title attribute is
used by the screen readers

24
00:01:24.820 --> 00:01:28.088
that help the visually impaired
people get through the web page.

25
00:01:28.088 --> 00:01:33.290
The content in between the opening and
closing a tags is the content

26
00:01:33.290 --> 00:01:37.720
you're going to see in the web page, when
it is served and on which you're going to

27
00:01:37.720 --> 00:01:42.810
be able to click to go to the href
that the a tag is configured with.

28
00:01:42.810 --> 00:01:45.700
Note the second example of our a tag.

29
00:01:45.700 --> 00:01:50.030
In this example, we're surrounding
a div tag with our anchor tag.

30
00:01:50.030 --> 00:01:52.550
In other words,
this div tag is going to be

31
00:01:52.550 --> 00:01:56.650
the content over our link on which
were going to be able to click.

32
00:01:56.650 --> 00:01:59.210
Let's go ahead and
see what this look like in the browser?

33
00:02:01.300 --> 00:02:03.710
Okay.
So, here is our internal links page, and

34
00:02:03.710 --> 00:02:04.830
we have a couple of links.

35
00:02:04.830 --> 00:02:08.990
One it says linking to a file in the same
directory, and the one is the DIV.

36
00:02:08.990 --> 00:02:12.930
That's the a tag surrounding
the div tag that says DIV linking

37
00:02:12.930 --> 00:02:14.310
to a file in the same directory.

38
00:02:14.310 --> 00:02:18.770
And if we click that, we're going
to go to this same-directory.html

39
00:02:18.770 --> 00:02:22.650
page which basically just provides
a link back to our original page.

40
00:02:22.650 --> 00:02:25.640
What's interesting to note
here is that the first link,

41
00:02:25.640 --> 00:02:28.190
linking to a file in the same directory,

42
00:02:28.190 --> 00:02:34.810
is clearly an inline tag since it's not
forcing itself to go to a new line.

43
00:02:34.810 --> 00:02:39.630
But yet in the second case, div linking
to a file in the same directory,

44
00:02:39.630 --> 00:02:43.220
we're surrounding the div
tag with our a tag.

45
00:02:43.220 --> 00:02:44.010
So what's going on here?

46
00:02:44.010 --> 00:02:49.900
Are we using block level element,
the div, inside an inline element?

47
00:02:49.900 --> 00:02:52.590
Well, turns out things
are little bit more interesting.

48
00:02:52.590 --> 00:02:57.490
Let's take a look at the a tag as
defined in the W3C specification.

49
00:02:57.490 --> 00:03:02.260
If you take a look closely,
the a tag is both a flow content and

50
00:03:02.260 --> 00:03:03.760
a phrasing content.

51
00:03:03.760 --> 00:03:08.110
In other words, to map it back to
the HTML four days, the a tag in

52
00:03:08.110 --> 00:03:14.080
the HTML5 is both an inline element and
a block level element at the same time.

53
00:03:14.080 --> 00:03:20.890
And this is what allows us to take the a
tag and surround a div tag inside of it.

54
00:03:20.890 --> 00:03:24.660
The authors of the HTML5 specification
realized that there are a lot of

55
00:03:24.660 --> 00:03:28.640
times where you would like to be
able to click on a whole region.

56
00:03:28.640 --> 00:03:32.730
And a most common occurrence of
that is on when you have a logo or

57
00:03:32.730 --> 00:03:38.370
some sort of a company name in the top
left corner for example, of your webpage.

58
00:03:38.370 --> 00:03:41.200
People expect to be able
to click on that and

59
00:03:41.200 --> 00:03:43.988
be able to go to the front
page of the company.

60
00:03:43.988 --> 00:03:47.980
Prior to HTML5,
people had to use all kinds of tricks

61
00:03:47.980 --> 00:03:52.930
in order to achieve that effect because
the a tag was only an inline tag, and

62
00:03:52.930 --> 00:03:56.870
you weren't really able to wrap
the a tag around the div tag.

63
00:03:57.960 --> 00:04:02.030
Next, let's take a look at
an example of an external link.

64
00:04:02.030 --> 00:04:06.385
Here we are in Sublime Text again and
looking at the file called

65
00:04:06.385 --> 00:04:12.662
links-external.html which is again located
in the examples/ Lecture09 folder.

66
00:04:13.680 --> 00:04:17.880
And this document basically
contains just a single link.

67
00:04:17.880 --> 00:04:24.560
There's really nothing super special about
external links other that their href value

68
00:04:24.560 --> 00:04:29.890
usually starts with http://
because it's usually the case

69
00:04:29.890 --> 00:04:35.050
that external links are hosted on
a different domain name than your website.

70
00:04:35.050 --> 00:04:39.820
However, there's one feature of the a
element that I would like to demonstrate

71
00:04:39.820 --> 00:04:44.520
that is quite often used in
conjunction with external links.

72
00:04:44.520 --> 00:04:46.930
And that is the target attribute.

73
00:04:46.930 --> 00:04:51.270
Target attribute,
when it's set to the value _blank,

74
00:04:51.270 --> 00:04:56.450
forces the browser to open this
page in a new tab or a new window.

75
00:04:56.450 --> 00:05:00.960
The reason that's advantageous is because
nowadays unfortunately people have a very

76
00:05:00.960 --> 00:05:06.940
short attention span, and if you take them
from your website to a different website,

77
00:05:06.940 --> 00:05:10.830
it is a very good chance that they
will never come back to your site.

78
00:05:10.830 --> 00:05:14.070
And usually you don't want them
to leave your site completely.

79
00:05:14.070 --> 00:05:19.250
So target="_blank" is very
useful in that regard.

80
00:05:19.250 --> 00:05:21.950
Let's a take a look at
this page in the browser.

81
00:05:23.830 --> 00:05:25.100
And here's the page in the browser.

82
00:05:25.100 --> 00:05:29.820
And if we click this link, Coursera
Facebook Page, it will open a new tab and

83
00:05:29.820 --> 00:05:33.940
will load the Facebook page
pointed to by that link.

84
00:05:33.940 --> 00:05:37.810
Coincidentally, this is a Facebook page I
created for the two courses I'm teaching

85
00:05:37.810 --> 00:05:43.035
on Coursera which is at
facebook.com/CourseraWebDev.

86
00:05:43.035 --> 00:05:47.775
So please like this page, and follow
it as I'll be posting some optional but

87
00:05:47.775 --> 00:05:50.502
interesting and relevant material.

88
00:05:50.502 --> 00:05:53.812
Another type of link that is
extremely important to know about

89
00:05:53.812 --> 00:05:56.002
is a fragment identifier.

90
00:05:56.002 --> 00:06:01.760
So here I'm in again in Sublime Text
in links-same-page.html.

91
00:06:01.760 --> 00:06:05.640
That is located in
examples/Lecture09 folder.

92
00:06:05.640 --> 00:06:09.340
And as you could see,
the links that have set up here

93
00:06:09.340 --> 00:06:14.688
all have a very specific
format in the href attribute.

94
00:06:14.688 --> 00:06:21.550
It's a # followed by some name like
section1, section2, and so on.

95
00:06:21.550 --> 00:06:27.260
Now what these links are pointing
to is a section of our page.

96
00:06:27.260 --> 00:06:30.680
Now you could identify a section
a couple of different ways.

97
00:06:30.680 --> 00:06:36.340
You can have in any tag that has
an id with that section name.

98
00:06:36.340 --> 00:06:40.740
Notice that the section name
does not contain the # sign.

99
00:06:40.740 --> 00:06:44.250
Only the link to that
section contains the # sign.

100
00:06:44.250 --> 00:06:47.330
That's one way to identify
a section within the page.

101
00:06:47.330 --> 00:06:50.970
Another way is, if we scroll down all
the way to the bottom of the page,

102
00:06:50.970 --> 00:06:55.480
is to create an anchor tag
with a name attribute and

103
00:06:55.480 --> 00:07:00.220
name the section very similarly
to the way you name a section id.

104
00:07:00.220 --> 00:07:04.390
The way you refer to these
sections is exactly the same,

105
00:07:04.390 --> 00:07:07.830
you put a # in front of
the name of the section and

106
00:07:07.830 --> 00:07:12.660
stick that value in the href
attribute of an anchor tag.

107
00:07:12.660 --> 00:07:14.998
So let's take a look at this
document in the browser.

108
00:07:14.998 --> 00:07:16.810
And here's the document.

109
00:07:16.810 --> 00:07:19.670
As you can see,
we have six different links.

110
00:07:19.670 --> 00:07:21.720
And if we click on any one of these links,

111
00:07:21.720 --> 00:07:26.970
it will take us to the section of the page
that is marked with that particular id.

112
00:07:28.010 --> 00:07:32.490
If we scroll all the way down,
we even have a back to the top link

113
00:07:32.490 --> 00:07:36.070
which basically points to
all the way to the top.

114
00:07:36.070 --> 00:07:39.520
Now, the top is right here, and
if you look at the code and

115
00:07:39.520 --> 00:07:44.480
scroll all the way up,
we have an h1 tag that has an id

116
00:07:44.480 --> 00:07:49.760
with top which allows us to scroll all
the way to the bottom of the page,

117
00:07:49.760 --> 00:07:52.410
see that link, and
jump right back to the top.

118
00:07:53.420 --> 00:07:58.110
What's really neat about fragment
identifiers is if you click on one and

119
00:07:58.110 --> 00:08:02.840
you have them in URL,
you could copy and paste this URL and

120
00:08:02.840 --> 00:08:05.900
send it to a friend as a bookmark.

121
00:08:05.900 --> 00:08:10.450
And when they paste it into their browser,
they will be taken to this page and

122
00:08:10.450 --> 00:08:15.688
jump straight to the section that was
pointed to by the fragment identifier.

123
00:08:15.688 --> 00:08:19.740
Now I am on my local hard drive, and
I'm not on a server so obviously sending

124
00:08:19.740 --> 00:08:24.150
this link that points to my local hard
drive is not going to do any good.

125
00:08:24.150 --> 00:08:28.850
But if we're on a server, this link with
the section identifier would have taken

126
00:08:28.850 --> 00:08:33.420
anybody anywhere, with a connection to
the internet, to the proper page and

127
00:08:33.420 --> 00:08:35.065
to the proper section of that page.

128
00:08:35.065 --> 00:08:41.465
While fragment identifiers are very useful
in order to jump to different parts of

129
00:08:41.465 --> 00:08:46.335
the same page, recently they have become
even more important as they're used for

130
00:08:46.335 --> 00:08:51.270
navigation within the SPA or
Single Page Applications.

131
00:08:51.270 --> 00:08:55.930
And SPA, Single Page Applications
have become extremely popular.

132
00:08:55.930 --> 00:09:00.561
So knowing how fragment identifiers
work is an important step towards

133
00:09:00.561 --> 00:09:03.629
being able to code single
page applications.